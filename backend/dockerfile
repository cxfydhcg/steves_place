# Development stage
FROM python:3.12-slim AS development

# Set working directory
WORKDIR /app

# Copy requirements and install dependencies globally for development
COPY requirements.txt test_requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt -r test_requirements.txt

# Set environment variables for development
ENV PYTHONDONTWRITEBYTECODE=1

# Copy application code
COPY . .

# Expose port
EXPOSE 5000


# Run tests with coverage first, then start Flask development server
CMD ["sh", "-c", "cd tests && python run_tests.py --coverage || true; cd .. && python -u app.py"]

# Build stage - Install dependencies
FROM python:3.12-slim AS build

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy requirements and install dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --user -r requirements.txt


# Production stage
FROM python:3.12-slim AS production

# Create non-root user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set working directory
WORKDIR /app

# Copy Python packages from build stage
COPY --from=build /root/.local /home/appuser/.local

# Copy application code
COPY --chown=appuser:appuser . .

# Create data directory with proper permissions
RUN mkdir -p /app/data && chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Add local Python packages to PATH
ENV PATH=/home/appuser/.local/bin:$PATH

# Set environment variables for production
ENV PYTHONDONTWRITEBYTECODE=1

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:5000/', timeout=5)" || exit 1

# Run the application
CMD ["python", "-u", "app.py"]